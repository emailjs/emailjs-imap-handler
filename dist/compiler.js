'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (response, asArray, isLogging) {
  var respParts = [];
  var resp = (response.tag || '') + (response.command ? ' ' + response.command : '');
  var needsSpace = true;

  var walk = function walk(node) {
    if (resp.length > 0 && needsSpace) {
      resp += ' ';
    }

    if (Array.isArray(node)) {
      needsSpace = false;
      resp += '(';
      node.forEach(walk);
      resp += ')';
      return;
    } else {
      needsSpace = true;
    }

    if (!node && typeof node !== 'string' && typeof node !== 'number') {
      resp += 'NIL';
      return;
    }

    if (typeof node === 'string') {
      if (isLogging && node.length > 20) {
        resp += '"(* ' + node.length + 'B string *)"';
      } else {
        resp += JSON.stringify(node);
      }
      return;
    }

    if (typeof node === 'number') {
      resp += Math.round(node) || 0; // Only integers allowed
      return;
    }

    if (isLogging && node.sensitive) {
      resp += '"(* value hidden *)"';
      return;
    }

    switch (node.type.toUpperCase()) {
      case 'LITERAL':
        if (isLogging) {
          resp += '"(* ' + node.value.length + 'B literal *)"';
        } else {
          if (!node.value) {
            resp += '{0}\r\n';
          } else {
            resp += '{' + node.value.length + '}\r\n';
          }
          respParts.push(resp);
          resp = node.value || '';
        }
        break;

      case 'STRING':
        if (isLogging && node.value.length > 20) {
          resp += '"(* ' + node.value.length + 'B string *)"';
        } else {
          resp += JSON.stringify(node.value || '');
        }
        break;
      case 'TEXT':
      case 'SEQUENCE':
        resp += node.value || '';
        break;

      case 'NUMBER':
        resp += node.value || 0;
        break;

      case 'ATOM':
      case 'SECTION':
        var val = node.value || '';

        for (var i = val.charCodeAt(0) === _formalSyntax.ASCII_BACKSLASH ? 1 : 0; i < val.length; i++) {
          if (!(0, _formalSyntax.IS_ATOM_CHAR)(val.charCodeAt(i))) {
            val = JSON.stringify(val);
            break;
          }
        }

        resp += val;

        if (node.section) {
          resp += '[';
          if (node.section.length) {
            needsSpace = false;
            node.section.forEach(walk);
          }
          resp += ']';
        }
        if (node.partial) {
          resp += '<' + node.partial.join('.') + '>';
        }
        break;
    }
  };

  [].concat(response.attributes || []).forEach(walk);

  if (resp.length) {
    respParts.push(resp);
  }

  return asArray ? respParts : respParts.join('');
};

var _formalSyntax = require('./formal-syntax');

;

/**
 * Compiles an input object into
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlci5qcyJdLCJuYW1lcyI6WyJyZXNwb25zZSIsImFzQXJyYXkiLCJpc0xvZ2dpbmciLCJyZXNwUGFydHMiLCJyZXNwIiwidGFnIiwiY29tbWFuZCIsIm5lZWRzU3BhY2UiLCJ3YWxrIiwibm9kZSIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJKU09OIiwic3RyaW5naWZ5IiwiTWF0aCIsInJvdW5kIiwic2Vuc2l0aXZlIiwidHlwZSIsInRvVXBwZXJDYXNlIiwidmFsdWUiLCJwdXNoIiwidmFsIiwiaSIsImNoYXJDb2RlQXQiLCJBU0NJSV9CQUNLU0xBU0giLCJzZWN0aW9uIiwicGFydGlhbCIsImpvaW4iLCJjb25jYXQiLCJhdHRyaWJ1dGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7a0JBUWUsVUFBVUEsUUFBVixFQUFvQkMsT0FBcEIsRUFBNkJDLFNBQTdCLEVBQXdDO0FBQ3JELE1BQUlDLFlBQVksRUFBaEI7QUFDQSxNQUFJQyxPQUFPLENBQUNKLFNBQVNLLEdBQVQsSUFBZ0IsRUFBakIsS0FBd0JMLFNBQVNNLE9BQVQsR0FBbUIsTUFBTU4sU0FBU00sT0FBbEMsR0FBNEMsRUFBcEUsQ0FBWDtBQUNBLE1BQUlDLGFBQWEsSUFBakI7O0FBRUEsTUFBSUMsT0FBTyxTQUFQQSxJQUFPLENBQVVDLElBQVYsRUFBZ0I7QUFDekIsUUFBSUwsS0FBS00sTUFBTCxHQUFjLENBQWQsSUFBbUJILFVBQXZCLEVBQW1DO0FBQ2pDSCxjQUFRLEdBQVI7QUFDRDs7QUFFRCxRQUFJTyxNQUFNQyxPQUFOLENBQWNILElBQWQsQ0FBSixFQUF5QjtBQUN2QkYsbUJBQWEsS0FBYjtBQUNBSCxjQUFRLEdBQVI7QUFDQUssV0FBS0ksT0FBTCxDQUFhTCxJQUFiO0FBQ0FKLGNBQVEsR0FBUjtBQUNBO0FBQ0QsS0FORCxNQU1PO0FBQ0xHLG1CQUFhLElBQWI7QUFDRDs7QUFFRCxRQUFJLENBQUNFLElBQUQsSUFBUyxPQUFPQSxJQUFQLEtB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QUFULElBQXVCLEVBQWpDLEVBQXFDbEIsT0FBckMsQ0FBNkNMLElBQTdDOztBQUVBLE1BQUlKLEtBQUtNLE1BQVQsRUFBaUI7QUFDZlAsY0FBVW1CLElBQVYsQ0FBZWxCLElBQWY7QUFDRDs7QUFFRCxTQUFPSCxVQUFVRSxTQUFWLEdBQXNCQSxVQUFVMEIsSUFBVixDQUFlLEVBQWYsQ0FBN0I7QUFDRCxDOztBQXRIRDs7QUFzSEM7O0FBakhEIiwiZmlsZSI6ImNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQVNDSUlfQkFDS1NMQVNILFxuICBJU19BVE9NX0NIQVJcbn0gZnJvbSAnLi9mb3JtYWwtc3ludGF4J1xuXG4vKipcbiAqIENvbXBpbGVzIGFuIGlucHV0IG9iamVjdCBpbnRvXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChyZXNwb25zZSwgYXNBcnJheSwgaXNMb2dnaW5nKSB7XG4gIGxldCByZXNwUGFydHMgPSBbXVxuICBsZXQgcmVzcCA9IChyZXNwb25zZS50YWcgfHwgJycpICsgKHJlc3BvbnNlLmNvbW1hbmQgPyAnICcgKyByZXNwb25zZS5jb21tYW5kIDogJycpXG4gIGxldCBuZWVkc1NwYWNlID0gdHJ1ZVxuXG4gIGxldCB3YWxrID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAocmVzcC5sZW5ndGggPiAwICYmIG5lZWRzU3BhY2UpIHtcbiAgICAgIHJlc3AgKz0gJyAnXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICAgIG5lZWRzU3BhY2UgPSBmYWxzZVxuICAgICAgcmVzcCArPSAnKCdcbiAgICAgIG5vZGUuZm9yRWFjaCh3YWxrKVxuICAgICAgcmVzcCArPSAnKSdcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICBuZWVkc1NwYWNlID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmICghbm9kZSAmJiB0eXBlb2Ygbm9kZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIG5vZGUgIT09ICdudW1iZXInKSB7XG4gICAgICByZXNwICs9ICdOSUwnXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoaXNMb2dnaW5nICYmIG5vZGUubGVuZ3RoID4gMjApIHtcbiAgICAgICAgcmVzcCArPSAnXCIoKiAnICsgbm9kZS5sZW5ndGggKyAnQiBzdHJpbmcgKilcIidcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3AgKz0gSlNPTi5zdHJpbmdpZnkobm9kZSlcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJlc3AgKz0gTWF0aC5yb3VuZChub2RlKSB8fCAwIC8vIE9ubHkgaW50ZWdlcnMgYWxsb3dlZFxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzTG9nZ2luZyAmJiBub2RlLnNlbnNpdGl2ZSkge1xuICAgICAgcmVzcCArPSAnXCIoKiB2YWx1ZSBoaWRkZW4gKilcIidcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHN3aXRjaCAobm9kZS50eXBlLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgJ0xJVEVSQUwnOlxuICAgICAgICBpZiAoaXNMb2dnaW5nKSB7XG4gICAgICAgICAgcmVzcCArPSAnXCIoKiAnICsgbm9kZS52YWx1ZS5sZW5ndGggKyAnQiBsaXRlcmFsICopXCInXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFub2RlLnZhbHVlKSB7XG4gICAgICAgICAgICByZXNwICs9ICd7MH1cXHJcXG4nXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3AgKz0gJ3snICsgbm9kZS52YWx1ZS5sZW5ndGggKyAnfVxcclxcbidcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzcFBhcnRzLnB1c2gocmVzcClcbiAgICAgICAgICByZXNwID0gbm9kZS52YWx1ZSB8fCAnJ1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ1NUUklORyc6XG4gICAgICAgIGlmIChpc0xvZ2dpbmcgJiYgbm9kZS52YWx1ZS5sZW5ndGggPiAyMCkge1xuICAgICAgICAgIHJlc3AgKz0gJ1wiKCogJyArIG5vZGUudmFsdWUubGVuZ3RoICsgJ0Igc3RyaW5nICopXCInXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzcCArPSBKU09OLnN0cmluZ2lmeShub2RlLnZhbHVlIHx8ICcnKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdURVhUJzpcbiAgICAgIGNhc2UgJ1NFUVVFTkNFJzpcbiAgICAgICAgcmVzcCArPSBub2RlLnZhbHVlIHx8ICcnXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ05VTUJFUic6XG4gICAgICAgIHJlc3AgKz0gKG5vZGUudmFsdWUgfHwgMClcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnQVRPTSc6XG4gICAgICBjYXNlICdTRUNUSU9OJzpcbiAgICAgICAgbGV0IHZhbCA9IG5vZGUudmFsdWUgfHwgJydcblxuICAgICAgICBmb3IgKGxldCBpID0gdmFsLmNoYXJDb2RlQXQoMCkgPT09IEFTQ0lJX0JBQ0tTTEFTSCA/IDEgOiAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFJU19BVE9NX0NIQVIodmFsLmNoYXJDb2RlQXQoaSkpKSB7XG4gICAgICAgICAgICB2YWwgPSBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3AgKz0gdmFsXG5cbiAgICAgICAgaWYgKG5vZGUuc2VjdGlvbikge1xuICAgICAgICAgIHJlc3AgKz0gJ1snXG4gICAgICAgICAgaWYgKG5vZGUuc2VjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5lZWRzU3BhY2UgPSBmYWxzZVxuICAgICAgICAgICAgbm9kZS5zZWN0aW9uLmZvckVhY2god2FsaylcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzcCArPSAnXSdcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5wYXJ0aWFsKSB7XG4gICAgICAgICAgcmVzcCArPSAnPCcgKyBub2RlLnBhcnRpYWwuam9pbignLicpICsgJz4nXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH07XG5cbiAgW10uY29uY2F0KHJlc3BvbnNlLmF0dHJpYnV0ZXMgfHwgW10pLmZvckVhY2god2FsaylcblxuICBpZiAocmVzcC5sZW5ndGgpIHtcbiAgICByZXNwUGFydHMucHVzaChyZXNwKVxuICB9XG5cbiAgcmV0dXJuIGFzQXJyYXkgPyByZXNwUGFydHMgOiByZXNwUGFydHMuam9pbignJylcbn07XG4iXX0=